name: Pytest Profiling and Monitoring 

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  profiling:
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache pip and pytest dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pytest
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-deps-

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install pytest-monitor pytest-profiling pytest-html

    - name: Run tests and generate report
      run: |
        pytest \
          --junitxml=test-results.xml \
          --monitor-cpu=90 \
          --monitor-memory=90 \
          --profile=tests/profile \
          --profile-svg \
          --profile-svg-path=profiles/ \
          --profile-sort=avgtime \
          --html=report.html \
          --self-contained-html
      env:
        CI: true

    - name: Generate report
      id: generate_report
      uses: actions/upload-artifact@v3
      with:
        name: Test results
        path: |
          report.html
          test-results.xml
          profiles/


  monitoring:
    runs-on: ubuntu-latest
    needs: profiling
    env:
      CI: true

    steps:
    - name: Monitor CPU and memory usage
      id: monitoring
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const execSync = require('child_process').execSync;
          const cpuPercent = parseFloat(execSync('top -b -n1 | grep "Cpu(s)" | awk \'{print $2}\'').toString().trim());
          const memoryPercent = parseFloat(execSync('free | grep Mem | awk \'{print $3/$2 * 100.0}\'').toString().trim());
          
          if (cpuPercent > 90 || memoryPercent > 90) {
            const body = `⚠️ High CPU/Memory usage detected in Pytest Monitoring and Profiling workflow:
            CPU usage: ${cpuPercent}%
            Memory usage: ${memoryPercent}%
            View report: ${steps.profiling.outputs.generate_report.outputs.url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            });
          }
